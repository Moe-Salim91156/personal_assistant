=== CPP98: Socket Programming Basics ===

HEADERS:
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <unistd.h>
#include <fcntl.h>

BASIC SERVER FLOW:
1. socket()     - Create socket
2. bind()       - Bind to address/port
3. listen()     - Mark as passive (ready to accept)
4. accept()     - Accept incoming connections
5. recv/send    - Communicate
6. close()      - Close socket

CREATING A SOCKET:
int server_fd = socket(AF_INET, SOCK_STREAM, 0);
if (server_fd < 0) {
    perror("socket failed");
    exit(EXIT_FAILURE);
}

// AF_INET = IPv4
// SOCK_STREAM = TCP
// SOCK_DGRAM = UDP

SETTING SOCKET OPTIONS:
int opt = 1;
if (setsockopt(server_fd, SOL_SOCKET, SO_REUSEADDR, &opt, sizeof(opt)) < 0) {
    perror("setsockopt failed");
    exit(EXIT_FAILURE);
}

// SO_REUSEADDR: Allows reusing address immediately after close
// Prevents "Address already in use" errors

BINDING TO ADDRESS:
struct sockaddr_in address;
address.sin_family = AF_INET;
address.sin_addr.s_addr = INADDR_ANY;  // Listen on all interfaces
address.sin_port = htons(8080);        // Port 8080 (host to network short)

if (bind(server_fd, (struct sockaddr*)&address, sizeof(address)) < 0) {
    perror("bind failed");
    exit(EXIT_FAILURE);
}

LISTENING FOR CONNECTIONS:
if (listen(server_fd, 10) < 0) {
    perror("listen failed");
    exit(EXIT_FAILURE);
}
// 10 = backlog (max pending connections in queue)

ACCEPTING CONNECTIONS:
struct sockaddr_in client_addr;
socklen_t client_len = sizeof(client_addr);

int client_fd = accept(server_fd, (struct sockaddr*)&client_addr, &client_len);
if (client_fd < 0) {
    perror("accept failed");
    exit(EXIT_FAILURE);
}

// accept() blocks until client connects
// Returns new socket for communicating with that client

NON-BLOCKING SOCKETS:
int flags = fcntl(server_fd, F_GETFL, 0);
fcntl(server_fd, F_SETFL, flags | O_NONBLOCK);

// Now accept() won't block - returns -1 with errno = EAGAIN if no connection

READING FROM SOCKET:
char buffer[1024] = {0};
int bytes_read = recv(client_fd, buffer, sizeof(buffer) - 1, 0);

if (bytes_read < 0) {
    perror("recv failed");
} else if (bytes_read == 0) {
    std::cout << "Client disconnected" << std::endl;
} else {
    buffer[bytes_read] = '\0';
    std::cout << "Received: " << buffer << std::endl;
}

WRITING TO SOCKET:
const char* response = "HTTP/1.1 200 OK\r\n\r\nHello World";
int bytes_sent = send(client_fd, response, strlen(response), 0);

if (bytes_sent < 0) {
    perror("send failed");
}

CLOSING SOCKETS:
close(client_fd);
close(server_fd);

SIMPLE SERVER EXAMPLE:
int main() {
    int server_fd = socket(AF_INET, SOCK_STREAM, 0);
    
    int opt = 1;
    setsockopt(server_fd, SOL_SOCKET, SO_REUSEADDR, &opt, sizeof(opt));
    
    struct sockaddr_in address;
    address.sin_family = AF_INET;
    address.sin_addr.s_addr = INADDR_ANY;
    address.sin_port = htons(8080);
    
    bind(server_fd, (struct sockaddr*)&address, sizeof(address));
    listen(server_fd, 10);
    
    std::cout << "Server listening on port 8080..." << std::endl;
    
    while (true) {
        int client_fd = accept(server_fd, NULL, NULL);
        
        char buffer[1024] = {0};
        recv(client_fd, buffer, sizeof(buffer), 0);
        
        const char* response = "HTTP/1.1 200 OK\r\n\r\nHello!";
        send(client_fd, response, strlen(response), 0);
        
        close(client_fd);
    }
    
    close(server_fd);
    return 0;
}

WEBSERV: MULTIPLE CLIENTS WITH SELECT:
fd_set read_fds;
int max_fd = server_fd;

while (true) {
    FD_ZERO(&read_fds);
    FD_SET(server_fd, &read_fds);
    
    // Add all client sockets
    for (size_t i = 0; i < clients.size(); i++) {
        int fd = clients[i].getFd();
        FD_SET(fd, &read_fds);
        if (fd > max_fd)
            max_fd = fd;
    }
    
    int activity = select(max_fd + 1, &read_fds, NULL, NULL, NULL);
    
    if (FD_ISSET(server_fd, &read_fds)) {
        // New connection
        int client_fd = accept(server_fd, NULL, NULL);
        clients.push_back(Client(client_fd));
    }
    
    // Check existing clients
    for (size_t i = 0; i < clients.size(); i++) {
        int fd = clients[i].getFd();
        if (FD_ISSET(fd, &read_fds)) {
            // Data available to read
            char buffer[1024];
            int bytes = recv(fd, buffer, sizeof(buffer), 0);
            if (bytes <= 0) {
                // Client disconnected
                close(fd);
                clients.erase(clients.begin() + i);
            }
        }
    }
}

ERROR HANDLING:
// Check errno for specific errors
if (recv(fd, buffer, size, 0) < 0) {
    if (errno == EAGAIN || errno == EWOULDBLOCK) {
        // No data available (non-blocking socket)
    } else if (errno == ECONNRESET) {
        // Connection reset by peer
    } else {
        perror("recv");
    }
}

COMMON ERRORS:
- "Address already in use": Use SO_REUSEADDR
- "Broken pipe": Client closed connection, use SIGPIPE handling
- EAGAIN/EWOULDBLOCK: Normal for non-blocking sockets
- EINTR: System call interrupted by signal

GOTCHAS:
- Always check return values
- Use htons/htonl for port/address (byte order)
- recv() returns 0 when client disconnects gracefully
- Non-blocking sockets + select/poll/epoll for multiple clients
- Close sockets when done to avoid resource leaks
- Buffer sizes matter - recv might not read everything at once

42 WEBSERV SPECIFIC:
- Must handle multiple clients simultaneously
- Use select, poll, or epoll (NOT epoll for 42 usually)
- Parse HTTP requests correctly
- Handle chunked encoding
- Implement timeouts
- Handle partial reads/writes

RELATED:
select, poll, epoll, fcntl, sockaddr_in, htons, inet_ntoa
